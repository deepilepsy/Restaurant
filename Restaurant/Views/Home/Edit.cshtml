@model Restaurant.Models.Reservation

@{
    ViewData["Title"] = "Edit Reservation";
    Layout = null;
    var admin = Context.Session.GetString("admin");
    var staff = Context.Session.GetString("staff");
    var today = DateTime.Today.ToString("yyyy-MM-dd");
}

<!DOCTYPE html>
<html>
<head>
    <title>Edit Reservation</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/edit.css">
</head>
<body>
@if (staff == "true")
{
    <a href="@Url.Action("Staff", "Home")" class="back-link">
        ← Staff Panel
    </a>
}
else
{
    <a href="@Url.Action("Admin", "Home")" class="back-link">
        ← Admin Panel
    </a>
}

<div class="container">
    <div class="header">
        <h1>Edit Reservation</h1>
        <p>Modify reservation details for ID: #@Model.ReservationId</p>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            <strong>Success!</strong> @TempData["Success"]
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            <strong>Error!</strong> @TempData["Error"]
        </div>
    }

    <div class="reservation-info">
        <div class="info-title">Current Reservation Information</div>
        <div class="info-grid">
            <div class="info-item">
                <div class="info-label">Reservation ID</div>
                <div class="info-value">#@Model.ReservationId</div>
            </div>
            <div class="info-item">
                <div class="info-label">Table Number</div>
                <div class="info-value">@Model.TableId</div>
            </div>
            <div class="info-item">
                <div class="info-label">Created On</div>
                <div class="info-value">@Model.CreatedAt.ToString("MMM dd, yyyy")</div>
            </div>
            <div class="info-item">
                <div class="info-label">Current Status</div>
                <div class="info-value">
                    <span class="status-badge status-@Model.ReservationStatus.Replace("-", "")">
                        @Model.ReservationStatus
                    </span>
                </div>
            </div>
        </div>
        @if (Model.ReservationStatus != "active")
        {
            <div class="modification-note">
                <strong>⚠️ Note:</strong> This reservation is currently @Model.ReservationStatus.ToUpper().
                Some fields may be restricted for modification.
            </div>
        }
    </div>

    <form asp-action="Edit" asp-controller="Home" method="post" id="editForm">
        <input type="hidden" name="ReservationId" value="@Model.ReservationId"/>
        <input type="hidden" name="CreatedAt" value="@Model.CreatedAt"/>
        <input type="hidden" name="ReservationStatus" value="@Model.ReservationStatus"/>
        <input type="hidden" name="CustomerId" value="@Model.CustomerId"/>

        <div class="form-section">
            <div class="section-title">Personal Information</div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="firstName">First Name <span class="required">*</span></label>
                    <input type="text" id="firstName" name="Customer.Name"
                           value="@(Model.Customer?.Name ?? "")" required placeholder="Enter first name">
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" name="Customer.Surname"
                           value="@(Model.Customer?.Surname ?? "")" required placeholder="Enter last name">
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Contact Information</div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="phone">Phone Number <span class="required">*</span></label>
                    <input type="tel" id="phone" maxlength="13" name="Customer.TelNo"
                           value="@(Model.Customer?.TelNo ?? "")" required placeholder="+90 (555) 123-4567">
                </div>
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" name="Customer.Email"
                           value="@(Model.Customer?.Email ?? "")" placeholder="your.email@example.com">
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Reservation Details</div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="guestNumber">Number of Guests <span class="required">*</span></label>
                    @if (Model.ReservationStatus != "active")
                    {
                        <select id="guestNumber" name="GuestNumber" required disabled class="readonly-field">
                            <option value="@Model.GuestNumber" selected>@Model.GuestNumber @(Model.GuestNumber == 1 ? "Guest" : "Guests")</option>
                        </select>
                    }
                    else
                    {
                        <select id="guestNumber" name="GuestNumber" required onchange="updateAvailableTables()">
                            @for (int i = 1; i <= 10; i++)
                            {
                                if (i == Model.GuestNumber)
                                {
                                    <option value="@i" selected>@i @(i == 1 ? "Guest" : "Guests")</option>
                                }
                                else
                                {
                                    <option value="@i">@i @(i == 1 ? "Guest" : "Guests")</option>
                                }
                            }
                        </select>
                    }
                </div>
                <div class="form-group">
                    <label for="tableId">Table Number <span class="required">*</span></label>
                    @if (Model.ReservationStatus != "active")
                    {
                        <select id="tableId" name="TableId" disabled class="readonly-field">
                            <option value="@Model.TableId" selected>Table @Model.TableId</option>
                        </select>
                    }
                    else
                    {
                        <select id="tableId" name="TableId" required onchange="updateAssignedStaff()">
                            <option value="">Select a table...</option>
                        </select>
                    }
                </div>
            </div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="reservationDate">Reservation Date <span class="required">*</span></label>
                    @if (Model.ReservationStatus != "active")
                    {
                        <input type="date" id="reservationDate" name="ReservationDate"
                               value="@Model.ReservationDate.ToString("yyyy-MM-dd")" required
                               readonly class="readonly-field">
                    }
                    else
                    {
                        <input type="date" id="reservationDate" name="ReservationDate"
                               value="@Model.ReservationDate.ToString("yyyy-MM-dd")" required
                               min="@today" onchange="updateAvailableTables()">
                    }
                </div>
                <div class="form-group">
                    <label for="reservationTime">Reservation Time <span class="required">*</span></label>
                    @if (Model.ReservationStatus != "active")
                    {
                        <select id="reservationTime" name="ReservationHour" required disabled class="readonly-field">
                            <option value="@Model.ReservationHour" selected>@Model.ReservationHour</option>
                        </select>
                    }
                    else
                    {
                        <select id="reservationTime" name="ReservationHour" required onchange="updateAvailableTables()">
                            @if (Model.ReservationHour == "14:00")
                            {
                                <option value="14:00" selected>14:00</option>
                            }
                            else
                            {
                                <option value="14:00">14:00</option>
                            }

                            @if (Model.ReservationHour == "16:00")
                            {
                                <option value="16:00" selected>16:00</option>
                            }
                            else
                            {
                                <option value="16:00">16:00</option>
                            }

                            @if (Model.ReservationHour == "18:00")
                            {
                                <option value="18:00" selected>18:00</option>
                            }
                            else
                            {
                                <option value="18:00">18:00</option>
                            }

                            @if (Model.ReservationHour == "20:00")
                            {
                                <option value="20:00" selected>20:00</option>
                            }
                            else
                            {
                                <option value="20:00">20:00</option>
                            }

                            @if (Model.ReservationHour == "22:00")
                            {
                                <option value="22:00" selected>22:00</option>
                            }
                            else
                            {
                                <option value="22:00">22:00</option>
                            }
                        </select>
                    }
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Staff Assignment</div>
            <div class="form-group">
                <label for="servedBy">Served By</label>
                <select id="servedBy" name="ServedById" readonly style="background-color: #f5f5f5;">
                    <option value="@Model.ServedById" selected>@Model.ServedBy?.Name @Model.ServedBy?.Surname</option>
                </select>
                <small style="color: #d99a4e" class="form-text text-muted">Staff is automatically assigned based on the selected table.</small>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Additional Information</div>
            <div class="form-group">
                <label for="specialRequests">Special Requests or Notes</label>
                <textarea id="specialRequests" name="SpecialRequests" placeholder="Any special requests, dietary requirements, or notes...">@Model.SpecialRequests</textarea>
            </div>
        </div>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">
                Save Changes
            </button>

            @if (admin == "true")
            {
                <a href="@Url.Action("Admin", "Home")" class="btn btn-secondary">
                    Cancel
                </a>
            }
            else
            {
                <a href="@Url.Action("Staff", "Home")" class="btn btn-secondary">
                    Cancel
                </a>
            }

            @if (Model.ReservationStatus == "active")
            {
                <a href="@Url.Action("Delete", "Home", new { id = Model.ReservationId })"
                   class="btn btn-danger">
                    Delete Reservation
                </a>
            }
        </div>
    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/inputmask/5.0.8/inputmask.min.js"></script>
<script>
    const currentReservationId = @Model.ReservationId;
    let allTables = [];
    let allStaff = [];

    // Load initial data
    document.addEventListener('DOMContentLoaded', function() {
        loadTableCapacities();
        loadStaffMembers();

        // Initialize tables for current guest count
        setTimeout(() => {
            updateAvailableTables();
        }, 500);
    });

    async function loadTableCapacities() {
        try {
            const response = await fetch('/Home/GetTableCapacities');
            const data = await response.json();
            if (data.success) {
                allTables = data.tableCapacities;
            }
        } catch (error) {
            console.error('Error loading table capacities:', error);
        }
    }

    async function loadStaffMembers() {
        try {
            const response = await fetch('/Home/GetStaffMembers');
            const data = await response.json();
            if (data.success) {
                allStaff = data.staff;
            }
        } catch (error) {
            console.error('Error loading staff members:', error);
        }
    }

    async function updateAvailableTables() {
        const guestNumber = parseInt(document.getElementById('guestNumber').value);
        const date = document.getElementById('reservationDate').value;
        const time = document.getElementById('reservationTime').value;
        const tableSelect = document.getElementById('tableId');
        const currentTableId = @Model.TableId;

        if (!guestNumber || !date || !time) {
            return;
        }

        try {
            // Get available tables for the selected date/time
            const response = await fetch(`/Home/GetAvailableTables?date=${date}&time=${time}&currentReservationId=${currentReservationId}`);
            const data = await response.json();

            if (data.success) {
                // Filter tables by guest capacity
                const suitableTables = data.tables.filter(table =>
                    table.minCapacity <= guestNumber && table.maxCapacity >= guestNumber
                );

                // Clear current options
                tableSelect.innerHTML = '<option value="">Select a table...</option>';

                // Add suitable tables
                suitableTables.forEach(table => {
                    const option = document.createElement('option');
                    option.value = table.tableId;
                    option.textContent = `Table ${table.tableId} (${table.minCapacity}-${table.maxCapacity} people) - ${table.serverName}`;

                    // Select current table if it's still suitable
                    if (table.tableId === currentTableId) {
                        option.selected = true;
                    }

                    tableSelect.appendChild(option);
                });

                // If current table is no longer suitable, clear selection and staff
                if (!suitableTables.find(t => t.tableId === currentTableId)) {
                    document.getElementById('servedBy').innerHTML = '<option value="">Please select a table first</option>';
                } else {
                    // Update staff for current table
                    updateAssignedStaff();
                }

                // Show message if no suitable tables
                if (suitableTables.length === 0) {
                    tableSelect.innerHTML = '<option value="">No tables available for selected criteria</option>';
                    document.getElementById('servedBy').innerHTML = '<option value="">No staff assigned</option>';
                }
            }
        } catch (error) {
            console.error('Error updating available tables:', error);
            tableSelect.innerHTML = '<option value="">Error loading tables</option>';
        }
    }

    function updateAssignedStaff() {
        const tableId = parseInt(document.getElementById('tableId').value);
        const servedBySelect = document.getElementById('servedBy');

        if (!tableId) {
            servedBySelect.innerHTML = '<option value="">Please select a table first</option>';
            return;
        }

        // Find the table data
        const selectedTable = allTables.find(t => t.tableId === tableId);
        if (!selectedTable) {
            servedBySelect.innerHTML = '<option value="">Table information not found</option>';
            return;
        }

        // Find the staff member assigned to this table
        const tableSelect = document.getElementById('tableId');
        const selectedOption = tableSelect.options[tableSelect.selectedIndex];

        if (selectedOption && selectedOption.value) {
            // Extract server name from the option text
            const optionText = selectedOption.textContent;
            const serverName = optionText.split(' - ')[1];

            // Find the staff ID based on the server name
            const staffMember = allStaff.find(s => s.name === serverName);

            if (staffMember) {
                servedBySelect.innerHTML = `<option value="${staffMember.staffId}" selected>${staffMember.name}</option>`;
            } else {
                servedBySelect.innerHTML = `<option value="" selected>${serverName || 'Unknown Staff'}</option>`;
            }
        }
    }

    // Auto-hide alerts
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(function(alert) {
            alert.style.opacity = '0';
            alert.style.transition = 'opacity 0.5s ease';
            setTimeout(() => alert.remove(), 500);
        });
    }, 5000);
    
</script>
</body>
</html>