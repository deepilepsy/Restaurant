@model Restaurant.Models.Reservation

@{
    ViewData["Title"] = "Edit Reservation";
    Layout = null;
    var admin = Context.Session.GetString("admin");
    var staff = Context.Session.GetString("staff");
    var today = DateTime.Today.ToString("yyyy-MM-dd");
}

<!DOCTYPE html>
<html>
<head>
    <title>Edit Reservation</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/edit.css">
</head>
<body>
@if (staff == "true")
{
    <a href="@Url.Action("Staff", "Home")" class="back-link">
        ← Staff Panel
    </a>
}
else
{
    <a href="@Url.Action("Admin", "Home")" class="back-link">
        ← Admin Panel
    </a>
}

<div class="container">
    <div class="header">
        <h1>Edit Reservation</h1>
        <p>Modify reservation details for ID: #@Model.ReservationId</p>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            <strong>Success!</strong> @TempData["Success"]
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            <strong>Error!</strong> @TempData["Error"]
        </div>
    }

    <div class="reservation-info">
        <div class="info-title">Current Reservation Information</div>
        <div class="info-grid">
            <div class="info-item">
                <div class="info-label">Reservation ID</div>
                <div class="info-value">#@Model.ReservationId</div>
            </div>
            <div class="info-item">
                <div class="info-label">Table Number</div>
                <div class="info-value">@Model.TableId</div>
            </div>
            <div class="info-item">
                <div class="info-label">Created On</div>
                <div class="info-value">
                    @if (Model.ReservationDetail != null)
                    {
                        @Model.ReservationDetail.CreatedAt.ToString("MMM dd, yyyy")
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">Current Status</div>
                <div class="info-value">
                    @if (Model.ReservationDetail != null)
                    {
                        <span class="status-badge status-@Model.ReservationDetail.ReservationStatus.Replace("-", "")">
                            @Model.ReservationDetail.ReservationStatus
                        </span>
                    }
                    else
                    {
                        <span class="text-muted">-</span>
                    }
                </div>
            </div>
        </div>
        @if (Model.ReservationDetail?.ReservationStatus != "active")
        {
            <div class="modification-note">
                <strong>⚠️ Note:</strong> This reservation is currently @Model.ReservationDetail?.ReservationStatus?.ToUpper().
                Some fields may be restricted for modification.
            </div>
        }
    </div>

    <form asp-action="Edit" asp-controller="Home" method="post" id="editForm">
        <input type="hidden" name="ReservationId" value="@Model.ReservationId"/>
        <input type="hidden" name="ResDetailsId" value="@Model.ResDetailsId"/>
        <input type="hidden" name="CustomerId" value="@Model.CustomerId"/>
        <input type="hidden" name="CurrentTableId" value="@Model.TableId"/>

        <div class="form-section">
            <div class="section-title">Personal Information</div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="firstName">First Name <span class="required">*</span></label>
                    <input type="text" id="firstName" name="Customer.Name"
                           value="@(Model.Customer?.Name ?? "")" required placeholder="Enter first name">
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name <span class="required">*</span></label>
                    <input type="text" id="lastName" name="Customer.Surname"
                           value="@(Model.Customer?.Surname ?? "")" required placeholder="Enter last name">
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Contact Information</div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="phone">Phone Number <span class="required">*</span></label>
                    <input type="tel" id="phone" maxlength="13" name="Customer.TelNo"
                           value="@(Model.Customer?.TelNo ?? "")" required placeholder="+90 (555) 123-4567">
                </div>
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" name="Customer.Email"
                           value="@(Model.Customer?.Email ?? "")" placeholder="your.email@example.com">
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Reservation Details</div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="guestNumber">Number of Guests <span class="required">*</span></label>
                    @if (Model.ReservationDetail?.ReservationStatus != "active")
                    {
                        <select id="guestNumber" name="ReservationDetail.GuestNumber" required disabled class="readonly-field">
                            <option value="@(Model.ReservationDetail?.GuestNumber ?? 1)" selected>@(Model.ReservationDetail?.GuestNumber ?? 1) @((Model.ReservationDetail?.GuestNumber ?? 1) == 1 ? "Guest" : "Guests")</option>
                        </select>
                    }
                    else
                    {
                        <select id="guestNumber" name="ReservationDetail.GuestNumber" required onchange="updateTables()">
                            @for (int i = 1; i <= 10; i++)
                            {
                                if (i == (Model.ReservationDetail?.GuestNumber ?? 1))
                                {
                                    <option value="@i" selected>@i @(i == 1 ? "Guest" : "Guests")</option>
                                }
                                else
                                {
                                    <option value="@i">@i @(i == 1 ? "Guest" : "Guests")</option>
                                }
                            }
                        </select>
                    }
                </div>
                <div class="form-group">
                    <label for="tableId">Table Number <span class="required">*</span></label>
                    @if (Model.ReservationDetail?.ReservationStatus != "active")
                    {
                        <input type="hidden" name="TableId" value="@Model.TableId" />
                        <select id="tableId" disabled class="readonly-field">
                            <option value="@Model.TableId" selected>Table @Model.TableId</option>
                        </select>
                    }
                    else
                    {
                        <select id="tableId" name="TableId" required onchange="updateStaff()">
                            <option value="">Select a table...</option>
                        </select>
                    }
                </div>
            </div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="reservationDate">Reservation Date <span class="required">*</span></label>
                    @if (Model.ReservationDetail?.ReservationStatus != "active")
                    {
                        <input type="date" id="reservationDate" name="ReservationDetail.ReservationDate"
                               value="@(Model.ReservationDetail?.ReservationDate.ToString("yyyy-MM-dd") ?? today)" required
                               readonly class="readonly-field">
                    }
                    else
                    {
                        <input type="date" id="reservationDate" name="ReservationDetail.ReservationDate"
                               value="@(Model.ReservationDetail?.ReservationDate.ToString("yyyy-MM-dd") ?? today)" required
                               min="@today" onchange="updateTables()">
                    }
                </div>
                <div class="form-group">
                    <label for="reservationTime">Reservation Time <span class="required">*</span></label>
                    @if (Model.ReservationDetail?.ReservationStatus != "active")
                    {
                        <select id="reservationTime" name="ReservationDetail.ReservationHour" required disabled class="readonly-field">
                            <option value="@(Model.ReservationDetail?.ReservationHour ?? "14:00")" selected>@(Model.ReservationDetail?.ReservationHour ?? "14:00")</option>
                        </select>
                    }
                    else
                    {
                        <select id="reservationTime" name="ReservationDetail.ReservationHour" required onchange="updateTables()">
                            @{
                                var currentHour = Model.ReservationDetail?.ReservationHour ?? "14:00";
                            }
                            <option value="14:00" @(currentHour == "14:00" ? "selected" : "")>14:00</option>
                            <option value="16:00" @(currentHour == "16:00" ? "selected" : "")>16:00</option>
                            <option value="18:00" @(currentHour == "18:00" ? "selected" : "")>18:00</option>
                            <option value="20:00" @(currentHour == "20:00" ? "selected" : "")>20:00</option>
                            <option value="22:00" @(currentHour == "22:00" ? "selected" : "")>22:00</option>
                        </select>
                    }
                </div>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Staff Assignment</div>
            <div class="form-group">
                <label for="servedBy">Served By</label>
                <select id="servedBy" name="ServedById" readonly style="background-color: #f5f5f5;">
                    @if (Model.Table?.ServedBy != null)
                    {
                        <option value="@Model.Table.ServedBy.StaffId" selected>@Model.Table.ServedBy.Name @Model.Table.ServedBy.Surname</option>
                    }
                    else
                    {
                        <option value="" selected>Staff will be assigned based on table selection</option>
                    }
                </select>
                <small style="color: #d99a4e" class="form-text text-muted">Staff is automatically assigned based on the selected table.</small>
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">Additional Information</div>
            <div class="form-group">
                <label for="specialRequests">Special Requests or Notes</label>
                <textarea id="specialRequests" name="ReservationDetail.SpecialRequests" placeholder="Any special requests, dietary requirements, or notes...">@(Model.ReservationDetail?.SpecialRequests ?? "")</textarea>
            </div>
        </div>

        <div class="button-group">
            <button type="submit" class="btn btn-primary">
                Save Changes
            </button>

            @if (admin == "true")
            {
                <a href="@Url.Action("Admin", "Home")" class="btn btn-secondary">
                    Cancel
                </a>
            }
            else
            {
                <a href="@Url.Action("Staff", "Home")" class="btn btn-secondary">
                    Cancel
                </a>
            }
        </div>
    </form>
</div>

<script>
    const currentReservationId = @Model.ReservationId;
    let allTables = [];
    let allStaff = [];

    // Load initial data when page loads
    document.addEventListener('DOMContentLoaded', function() {
        loadTableData();
        loadStaffData();

        // Initialize tables after data loads
        setTimeout(updateTables, 500);
    });

    // Load table data
    function loadTableData() {
        fetch('/Home/GetTableCapacities')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    allTables = data.tableCapacities;
                }
            })
            .catch(error => console.error('Error loading tables:', error));
    }

    // Load staff data
    function loadStaffData() {
        fetch('/Home/GetStaffMembers')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    allStaff = data.staff;
                }
            })
            .catch(error => console.error('Error loading staff:', error));
    }

    // Update available tables based on current selections
    function updateTables() {
        const guestNumber = parseInt(document.getElementById('guestNumber').value);
        const date = document.getElementById('reservationDate').value;
        const time = document.getElementById('reservationTime').value;
        const tableSelect = document.getElementById('tableId');
        const currentTableId = @Model.TableId;

        if (!guestNumber || !date || !time || !tableSelect) {
            return;
        }

        // Get available tables for the selected date/time
        const url = `/Home/GetAvailableTables?date=${encodeURIComponent(date)}&time=${encodeURIComponent(time)}&currentReservationId=${currentReservationId}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Clear current options
                    tableSelect.innerHTML = '<option value="">Select a table...</option>';

                    // Filter tables by guest capacity and add to select
                    for (let i = 0; i < data.tables.length; i++) {
                        const table = data.tables[i];
                        if (table.minCapacity <= guestNumber && table.maxCapacity >= guestNumber) {
                            const option = document.createElement('option');
                            option.value = table.tableId;
                            option.textContent = `Table ${table.tableId} (${table.minCapacity}-${table.maxCapacity} people) - ${table.serverName}`;

                            // Select current table if it's still available
                            if (table.tableId === currentTableId) {
                                option.selected = true;
                            }

                            tableSelect.appendChild(option);
                        }
                    }

                    updateStaff();
                }
            })
            .catch(error => {
                console.error('Error updating tables:', error);
                tableSelect.innerHTML = '<option value="">Error loading tables</option>';
            });
    }

    // Update staff assignment based on selected table
    function updateStaff() {
        const tableId = parseInt(document.getElementById('tableId').value);
        const servedBySelect = document.getElementById('servedBy');

        if (!tableId || !servedBySelect) {
            return;
        }

        // Find staff for selected table
        const tableSelect = document.getElementById('tableId');
        const selectedOption = tableSelect.options[tableSelect.selectedIndex];

        if (selectedOption && selectedOption.value) {
            // Extract server name from the option text
            const optionText = selectedOption.textContent;
            const parts = optionText.split(' - ');
            if (parts.length > 1) {
                const serverName = parts[1];

                // Find matching staff member
                for (let i = 0; i < allStaff.length; i++) {
                    if (allStaff[i].name === serverName) {
                        servedBySelect.innerHTML = `<option value="${allStaff[i].staffId}" selected>${allStaff[i].name}</option>`;
                        return;
                    }
                }

                // Fallback if staff not found
                servedBySelect.innerHTML = `<option value="" selected>${serverName}</option>`;
            }
        }
    }

    // Auto-hide alerts after 5 seconds
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        for (let i = 0; i < alerts.length; i++) {
            alerts[i].style.opacity = '0';
            alerts[i].style.transition = 'opacity 0.5s ease';
        }
        setTimeout(() => {
            for (let i = 0; i < alerts.length; i++) {
                if (alerts[i].parentNode) {
                    alerts[i].remove();
                }
            }
        }, 500);
    }, 5000);
</script>
</body>
</html>