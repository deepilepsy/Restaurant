@model Restaurant.Models.OrderManagementViewModel
@{
    ViewData["Title"] = "Order Management";
    Layout = null;

    // Group menu items manually without LINQ
    var categorizedMenuItems = new Dictionary<string, List<Restaurant.Models.MenuItem>>();
    foreach (var item in Model.MenuItems)
    {
        if (!categorizedMenuItems.ContainsKey(item.Category))
        {
            categorizedMenuItems[item.Category] = new List<Restaurant.Models.MenuItem>();
        }
        categorizedMenuItems[item.Category].Add(item);
    }
}
<!DOCTYPE html>
<html>
<head>
    <title>Order Management</title>
    <link rel="stylesheet" href="~/css/tables.css?v=1.0.2" asp-append-version="true"/>
    <link rel="stylesheet" href="~/css/ordermanagement.css?v=1.0.1" asp-append-version="true"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
<div class="header-section">
    <a asp-controller="Home" asp-action="Staff" class="back-button">
        <i class="fas fa-arrow-left"></i> Back to Staff Panel
    </a>
    <h1 class="page-title">
        Order Management
    </h1>
</div>

<!-- Reservation Info Card -->
<div class="reservation-info-card">
    <div class="info-row">
        <div class="info-item">
            <strong>Table:</strong> @Model.Reservation.Table?.TableId
        </div>
        <div class="info-item">
            <strong>Customer:</strong>
            @if (Model.Reservation.Customer != null)
            {
                @($"{Model.Reservation.Customer.Name} {Model.Reservation.Customer.Surname}")
            }
            else
            {
                <span class="text-muted">Walk-in Customer</span>
            }
        </div>
        <div class="info-item">
            <strong>Guests:</strong>
            @if (Model.Reservation.ReservationDetail != null)
            {
                @Model.Reservation.ReservationDetail.GuestNumber
            }
            else
            {
                <span class="text-muted">-</span>
            }
        </div>
        <div class="info-item">
            <strong>Server:</strong>
            @if (Model.Reservation.Table?.ServedBy != null)
            {
                @($"{Model.Reservation.Table.ServedBy.Name} {Model.Reservation.Table.ServedBy.Surname}")
            }
            else
            {
                <span class="text-muted">-</span>
            }
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
<div class="message-container">
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            <strong>Success!</strong> @TempData["Success"]
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            <strong>Error!</strong> @TempData["Error"]
        </div>
    }
</div>

<div class="order-container">
    <!-- Menu Section -->
    <div class="menu-section">
        <h2>Menu</h2>

        <!-- Category Tabs -->
        <div class="category-tabs">
            <button class="tab-button active" onclick="showCategory('STARTERS')">Starters</button>
            <button class="tab-button" onclick="showCategory('SALADS')">Salads</button>
            <button class="tab-button" onclick="showCategory('MAIN')">Main Courses</button>
            <button class="tab-button" onclick="showCategory('SIDES')">Sides</button>
            <button class="tab-button" onclick="showCategory('DESSERTS')">Desserts</button>
            <button class="tab-button" onclick="showCategory('DRINKS')">Drinks</button>
        </div>

        <!-- Menu Items by Category -->
        @foreach (var categoryPair in categorizedMenuItems)
        {
            var category = categoryPair.Key;
            var categoryItems = categoryPair.Value;

            <div class="category-section" id="category-@category" style="@(category == "STARTERS" ? "" : "display: none;")">
                <h3>@category</h3>

                @{
                    // Group items by subcategory manually without LINQ
                    var subcategorizedItems = new Dictionary<string, List<Restaurant.Models.MenuItem>>();
                    foreach (var item in categoryItems)
                    {
                        var subcategory = item.Subcategory ?? "Other";
                        if (!subcategorizedItems.ContainsKey(subcategory))
                        {
                            subcategorizedItems[subcategory] = new List<Restaurant.Models.MenuItem>();
                        }
                        subcategorizedItems[subcategory].Add(item);
                    }
                }

                @foreach (var subcategoryPair in subcategorizedItems)
                {
                    var subcategory = subcategoryPair.Key;
                    var subcategoryItems = subcategoryPair.Value;

                    <div class="subcategory-section">
                        <h4>@subcategory</h4>
                        <div class="menu-grid">
                            @foreach (var item in subcategoryItems)
                            {
                                <div class="menu-item" data-item-id="@item.ItemId">
                                    <div class="item-header">
                                        <h5>@item.ItemName</h5>
                                        <span class="price">@item.Price</span>
                                    </div>
                                    @if (item.Calories.HasValue)
                                    {
                                        <div class="calories">@item.Calories cal</div>
                                    }
                                    <button class="add-button" onclick="addToOrder(@item.ItemId, '@Html.Raw(Html.Encode(item.ItemName))', '@item.Price', @(item.Calories ?? 0))">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Order Summary Section -->
    <div class="order-summary">
        <h2>
            @if (Model.ExistingReceipt != null)
            {
                <span>Updated Order</span>
            }
            else
            {
                <span>Current Order</span>
            }
        </h2>

        <div class="order-items" id="orderItems">
            <!-- Order items will be populated by script function -->
        </div>

        <div class="order-total">
            <div class="total-row">
                <strong>Total: <span id="orderTotal">0.00 TL</span></strong>
            </div>
        </div>

        <div class="order-actions">
            <button class="btn-primary" onclick="confirmOrder()" id="confirmButton" disabled>
                <i class="fas fa-check"></i>
                @if (Model.ExistingReceipt != null)
                {
                    <span>Update Order</span>
                }
                else
                {
                    <span>Confirm Order</span>
                }
            </button>
            <button class="btn-secondary" onclick="clearOrder()">
                <i class="fas fa-trash"></i> Clear Order
            </button>
        </div>

        <!-- Special Notes -->
        <div class="special-notes">
            <label for="specialNotes">Special Notes:</label>
            <textarea id="specialNotes" placeholder="Any special requests or modifications...">@{
                    // Get special notes without LINQ
                    string specialNotes = "";
                    if (Model.ExistingReceipt?.ReceiptItems != null)
                    {
                        foreach (var receiptItem in Model.ExistingReceipt.ReceiptItems)
                        {
                            if (!string.IsNullOrEmpty(receiptItem.SpecialNotes))
                            {
                                specialNotes = receiptItem.SpecialNotes;
                                break; // Get first non-empty special notes
                            }
                        }
                    }
                }@specialNotes</textarea>
        </div>
    </div>
</div>

<script>
    let currentOrder = [];
    let orderTotal = 0;
    let isUpdate = @(Model.ExistingReceipt != null ? "true" : "false");
    let existingReceiptData = null;

    @if (Model.ExistingReceipt != null)
    {
        <text>
            // Load existing receipt data
            existingReceiptData = {
                receiptId: @Model.ExistingReceipt.ReceiptId,
                items: [
                    @if (Model.ExistingReceipt.ReceiptItems != null && Model.ExistingReceipt.ReceiptItems.Count > 0)
                    {
                        {
                            var receiptItemsList = new List<Restaurant.Models.ReceiptItem>();
                            foreach (var item in Model.ExistingReceipt.ReceiptItems)
                            {
                                receiptItemsList.Add(item);
                            }
                            
                            for (int i = 0; i < receiptItemsList.Count; i++)
                            {
                                var item = receiptItemsList[i];
                                <text>,
                                    {
                                        itemId: @item.ItemId,
                                        itemName: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(item.MenuItem?.ItemName ?? "Unknown Item")),
                                        unitPrice: "@item.UnitPrice",
                                        quantity: @item.Quantity,
                                        calories: @(item.MenuItem?.Calories ?? 0)
                                    }@(i < receiptItemsList.Count - 1 ? "," : "")
                                </text>
                            }
                        }
                    }
                ]
            };
        </text>
    }

    function showCategory(categoryName) {
        // Hide all categories
        document.querySelectorAll('.category-section').forEach(section => {
            section.style.display = 'none';
        });

        // Show selected category
        document.getElementById('category-' + categoryName).style.display = 'block';

        // Update tab buttons
        document.querySelectorAll('.tab-button').forEach(button => {
            button.classList.remove('active');
        });
        event.target.classList.add('active');
    }

    function parsePrice(priceString) {
        // Handle both "145.00 TL" and "145.00" formats
        if (typeof priceString === 'string') {
            return parseFloat(priceString.replace(' TL', '').replace(',', '.'));
        }
        return parseFloat(priceString) || 0;
    }

    function loadExistingOrder() {
        if (existingReceiptData && existingReceiptData.items && existingReceiptData.items.length > 0) {
            // Clear current order first
            currentOrder = [];

            // Convert existing receipt items to order format
            existingReceiptData.items.forEach(item => {
                const unitPrice = parsePrice(item.unitPrice);
                const quantity = parseInt(item.quantity);

                currentOrder.push({
                    itemId: parseInt(item.itemId),
                    itemName: item.itemName,
                    unitPrice: unitPrice,
                    quantity: quantity,
                    totalPrice: unitPrice * quantity,
                    calories: parseInt(item.calories || 0)
                });
            });

            updateOrderDisplay();
        }
    }

    function addToOrder(itemId, itemName, price, calories) {
        // Parse price (remove " TL" and convert to number)
        const numericPrice = parsePrice(price);

        // Check if item already exists in order
        const existingItem = currentOrder.find(item => item.itemId === itemId);

        if (existingItem) {
            existingItem.quantity += 1;
            existingItem.totalPrice = existingItem.quantity * existingItem.unitPrice;
        } else {
            currentOrder.push({
                itemId: itemId,
                itemName: itemName,
                unitPrice: numericPrice,
                quantity: 1,
                totalPrice: numericPrice,
                calories: calories
            });
        }
        updateOrderDisplay();
    }

    function removeFromOrder(itemId) {
        const itemIndex = currentOrder.findIndex(item => item.itemId === itemId);
        if (itemIndex > -1) {
            if (currentOrder[itemIndex].quantity > 1) {
                currentOrder[itemIndex].quantity -= 1;
                currentOrder[itemIndex].totalPrice = currentOrder[itemIndex].quantity * currentOrder[itemIndex].unitPrice;
            } else {
                currentOrder.splice(itemIndex, 1);
            }
        }
        updateOrderDisplay();
    }

    function updateOrderDisplay() {
        const orderItemsContainer = document.getElementById('orderItems');
        const orderTotalElement = document.getElementById('orderTotal');
        const confirmButton = document.getElementById('confirmButton');

        // Clear current display
        orderItemsContainer.innerHTML = '';
        orderTotal = 0;

        // Populate order items
        currentOrder.forEach(item => {
            orderTotal += item.totalPrice;

            const orderItemElement = document.createElement('div');
            orderItemElement.className = 'order-item';
            orderItemElement.innerHTML = `
                <div class="item-details">
                    <div class="item-name">${item.itemName}</div>
                    <div class="item-price">${item.unitPrice.toFixed(2)} TL each</div>
                </div>
                <div class="quantity-controls">
                    <button class="qty-btn" onclick="removeFromOrder(${item.itemId})">-</button>
                    <span class="quantity">${item.quantity}</span>
                    <button class="qty-btn" onclick="addToOrder(${item.itemId}, '${item.itemName.replace(/'/g, "\\'")}', '${item.unitPrice.toFixed(2)} TL', ${item.calories})">+</button>
                </div>
                <div class="item-total">${item.totalPrice.toFixed(2)} TL</div>
            `;
            orderItemsContainer.appendChild(orderItemElement);
        });

        // Update total
        orderTotalElement.textContent = orderTotal.toFixed(2) + ' TL';

        // Enable/disable confirm button
        confirmButton.disabled = currentOrder.length === 0;
    }

    function clearOrder() {
        currentOrder = [];
        updateOrderDisplay();
    }

    function confirmOrder() {
        if (currentOrder.length === 0) {
            alert('Please add items to the order before confirming.');
            return;
        }

        const specialNotes = document.getElementById('specialNotes').value;
        const actionText = isUpdate ? 'updating' : 'confirming';

        // Convert order items to the format expected by the server (with string prices)
        const orderItems = currentOrder.map(item => ({
            itemId: item.itemId,
            itemName: item.itemName,
            unitPrice: item.unitPrice.toFixed(2) + " TL", // Convert back to string format
            quantity: item.quantity,
            calories: item.calories
        }));

        const orderData = {
            reservationId: @Model.Reservation.ReservationId,
            staffId: @(Model.Reservation.Table?.ServedBy?.StaffId ?? 1),
            totalAmount: orderTotal.toFixed(2) + " TL", // Convert to string format
            items: orderItems,
            specialNotes: specialNotes
        };

        // Show loading state
        const confirmBtn = document.getElementById('confirmButton');
        const originalText = confirmBtn.innerHTML;
        confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        confirmBtn.disabled = true;

        // Send order to server
        fetch('@Url.Action("ProcessOrder", "Home")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
            },
            body: JSON.stringify(orderData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = '@Url.Action("Staff", "Home")';
                } else {
                    alert(`Error ${actionText} order: ` + (data.message || 'Unknown error'));
                    // Restore button state
                    confirmBtn.innerHTML = originalText;
                    confirmBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(`An error occurred while ${actionText} the order.`);
                // Restore button state
                confirmBtn.innerHTML = originalText;
                confirmBtn.disabled = false;
            });
    }

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
        updateOrderDisplay();

        // Auto-load existing order if this is an update and we have data
        if (isUpdate && existingReceiptData && existingReceiptData.items && existingReceiptData.items.length > 0) {
            setTimeout(() => {
                loadExistingOrder();
            }, 500); // Give time for page to fully load
        }

        // Auto-hide alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                alert.style.opacity = '0';
                alert.style.transition = 'opacity 0.5s ease';
                setTimeout(() => alert.remove(), 500);
            });
        }, 5000);
    });
</script>
</body>
</html>